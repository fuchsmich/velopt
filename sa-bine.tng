--[[
interface for calculating a Sandwich beam
(c) 2013 Michael Fuchs
]]--
  dofile("femfunk.tng")

  function getInputVals()
    l = l_in:GetValue()
    q = q_in:GetValue()*1000
    
    h[0] = h0_in:GetValue()/100
    h[1] = h1_in:GetValue()/100
    h[2] = h2_in:GetValue()/100
    
    moe[0] = E_c_in:GetValue()*1e6
    
    moe[1] = E_tlc_in:GetValue()*1e6
    mos[1] = G_tlc_in:GetValue()*1e6
    rho[1] = rho_tlc_in:GetValue()
    
    moe[2] = E_t_in:GetValue()*1e6
    mos[2] = G_t_in:GetValue()*1e6
    rho[2] = rho_t_in:GetValue()
--     u_zul = l/u_max_in:GetValue()
  end

  function define_gui()
  --   System Vars
    system_vars = gui.TextBox("System Parameters")
    l_in = gui.NumberInputBox("Length Beam [m]", 2, 20, l, "getInputVals")
    q_in = gui.NumberInputBox("variable load [kN/m²]", 0, 100, q/1000, "getInputVals")
    
    cross_vars = gui.TextBox("Cross Section Parameters")
    h0_in = gui.NumberInputBox("Thickness Concrete Layer [cm]", 3, 30, h[0]*100, "getInputVals")
    h1_in = gui.NumberInputBox("Thickness Velox Layer [cm]", 3, 30, h[1]*100, "getInputVals")
    h2_in = gui.NumberInputBox("Thickness Concrete Layer [cm]", 3, 30, h[2]*100, "getInputVals")
    
    material_vars = gui.TextBox("Material Parameters")
    E_c_in = gui.NumberInputBox("MoE Concrete [N/mm²]", 1, 100000, moe[0]/1e6, "getInputVals")
    
    E_tlc_in = gui.NumberInputBox("MoE Timber Light Concrete [N/mm²]", 1, 100000, moe[1]/1e6, "getInputVals")
    G_tlc_in = gui.NumberInputBox("MoS Timber Light Concrete [N/mm²]", 1, 100000, mos[1]/1e6, "getInputVals")
    rho_tlc_in = gui.NumberInputBox("Density of Timber Light Concrete [kg/m³]", 0, 10000, rho[1], "getInputVals")

    E_t_in = gui.NumberInputBox("MoE Timber Light Concrete [N/mm²]", 1, 100000, moe[2]/1e6, "getInputVals")
    G_t_in = gui.NumberInputBox("MoS Timber Light Concrete [N/mm²]", 1, 100000, mos[2]/1e6, "getInputVals")
    rho_t_in = gui.NumberInputBox("Density of Timber Light Concrete [kg/m³]", 0, 10000, rho[2], "getInputVals")
--     sls_var = gui.TextBox("SLS")
--     u_max_in = gui.NumberInputBox("Max. Deflection (l/xxx) [1/m]", 100, 1000, l/u_zul, "getInputVals")
--  start calculation   
--     uls_var = gui.TextBox("ULS")
--     kmod_in = gui.NumberInputBox("Max. Deflection (l/xxx) [1/m]", 100, 1000, l/u_zul, "getInputVals")
    
    b1 = gui.PushButton("Start", "startCalculation")
--     control.Pause("pause")
--     result_obj = gui.TextBox("==Results== \nOptimized Solution")
--     res_h0 = gui.TextBox("h1: ")
--     res_h1 = gui.TextBox("h2: ")
--     res_h2 = gui.TextBox("h3: ")
--     res_htot = gui.TextBox("total height: ")
--     res_costs = gui.TextBox("total costs: ")
--     res_weight = gui.TextBox("total weight: ")
--     result_cons = gui.TextBox("==Constraints==")
--     con_u_max = gui.TextBox("u_zul = " .. string.format("%.2f",u_zul*1000) .. " mm > u_max: ")
--     con_sig_c_c = gui.TextBox("f_cd = " .. string.format("%.2f",f_cd/1e6) .." N/mm² > max. comp. stress concrete: ")
--     con_sig_c_t = gui.TextBox("max tens. stress concrete: ")
--     con_sig_t_c = gui.TextBox("f_md = " .. string.format("%.2f",f_md/1e6) .." N/mm² > max. stress timber: ")
  end
  
  function printResults(u, sig)
    print("u_max", u)
    print("sig: ", sig)
  end
  
  function drawResults(u, sig)
    local z_s = y__s(h, moe)*(-1)
    local z = tmath.Matrix(4)
    local sigz = tmath.Matrix(4)
--     Normalspannungen
    local v1=graph.Graph("Normal Stress", "Bright")
    v1:AxisLabels("stress [N/mm²]", "z_s [mm]")
    for i = 0, h:Rows()-1 do
      z[0] = (z_s[i] + h[i]/2)*1000
      z[1] = (z_s[i] + h[i]/2)*1000
      z[2] = (z_s[i] - h[i]/2)*1000
      z[3] = (z_s[i] - h[i]/2)*1000
      sigz[0] = 0
      sigz[1] = sig[{i,0}]/1e6
      sigz[2] = sig[{i,1}]/1e6
      sigz[3] = 0
--       print(sigz, z)
      v1:Plot(sigz,z, i+1, "sig["..(i+1).."]")
    end
--     Schubspannungen
    local v2=graph.Graph("Shear Stress", "Bright")
    v2:AxisLabels("stress [N/mm²]", "z_s [mm]")
    local z = tmath.Matrix(3)
    local tauz = tmath.Matrix(3)
    local n = 10
    local zz = tmath.Matrix(n)
    local tauzz = tmath.Matrix(n)
    for i = 0, h:Rows()-1 do
      for j = 0, 2 do
	z[j] = (z_s[i] - (j-1)*h[i]/2)*1000
	tauz[j] = sig[{i,j+2}]/1e6
      end
      v2:Plot(tauz,z, 1, "tau["..(i+1).."]")
--       print(tauz, z)
-- 	adz^2 + bdz +c = tauz
-- 	a (hi/2)^2 + b (hi/2) + tauz0 = tauz1
-- 	a (hi)^2 + b (hi) + tauz0 = tauz2
-- 	a ((hi/2)^2 - hi^2/2) + tauz0/2 = tauz1 - tauz2/2
-- 	a = (tauz1 - tauz2/2 - tauz0/2)/(hi^2/4 - hi^2/2)
-- 	b (hi/2 - hi/4) + tauz0 - tauz0/4 = tauz1 - tauz2/4
-- 	b = (tauz1 -tauz2/4 - 3tauz0/4)/(hi/4)
      local dz = h[i]/(n-1)
      local a = (tauz[1] - tauz[2]/2 -tauz[0]/2)/(-(h[i]/2)^2) 
      local b = (tauz[1] - tauz[2]/4 - 3*tauz[0]/4)/(h[i]/4)
      for j = 0,n-1 do
	zz[j] = (z_s[i] + h[i]/2 - j*dz)*1000
	tauzz[j] = tauz[0] + b*j*dz + a*(j*dz)^2
      end
      v2:Plot(tauzz,zz, 2, "tau["..(i+1).."]")
    end
  end
  
  function startCalculation()
      local u, sig = calcStructure(h, l, moe, mos, rho, q)
      printResults(u, sig)
      drawResults(u, sig)
  end

-- main starts here
-- default Parameters
l = 7.2 -- length of beam [m]
h = tmath.Matrix({{6/1e2}, {15/1e2}, {11.8/1e2}}) -- thickness of part sections (top down) [m]
moe = tmath.Matrix({{19560e6}, {1000e6}, {11600e6}}) -- MoE [N/m²]
mos = tmath.Matrix({{moe[0]/2/(1+0.2)}, {15e6}, {690e6}}) --MoS [N/m²]
rho = tmath.Matrix({{2400}, {750}, {470}}) --density [kg/m³]
q = 3000 -- variable load [N/m²]
u_zul = l/400

-- define_gui()

-- print("g:"dead_load(h, rho))
-- print("y_s:", y__s(h, moe))
-- print("EAa, GAa, EIa", stiffA(h, moe, mos))
-- print(stiffB(h, moe, mos))
startCalculation()

-- korrekte Lösung:
-- 
-- u_max	0.011130073811788
-- sig: Matrix 3x3
-- -3.4997e+006	-1.2254e+006	-21881	
-- -166544	124139	3078.89	
-- -98039.1	2.55454e+006	62218.8	
