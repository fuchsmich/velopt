--[[
beam system for shear analogy method
group velopt
--]]

-- include file for FEM stuff
  dofile("femfunk.tng")
-- This function defines the objective
  function define_gui()
  --   System Vars
    system_vars = gui.TextBox("System Parameters")
    l_in = gui.NumberInputBox("Length Beam [m]", 2, 20, l, "getInputVals")
    q_in = gui.NumberInputBox("variable load [kN/m²]", 0, 100, q/1000, "getInputVals")
  --   Start Values for cross-sections
    cross_vars = gui.TextBox("Cross Section Parameters")
    G_vel_in = gui.NumberInputBox("Modulus of Shear Velox [N/mm²]", 1, 1000, mos[1]/1e6, "getInputVals")
    rho_vel_in = gui.NumberInputBox("Density of Velox [kg/m³]", 1, 3000, rho[1], "getInputVals")
    h0_in = gui.NumberInputBox("Thickness Concrete Layer [cm]", 3, 30, h[0]*100, "getInputVals")
    h1_in = gui.NumberInputBox("Thickness Velox Layer [cm]", 3.5, 30, h[1]*100, "getInputVals")
    h2_in = gui.NumberInputBox("Thickness Concrete Layer [cm]", 3, 30, h[2]*100, "getInputVals")
  --   Constraints
    const_vars = gui.TextBox("Constraint Parameters")
    u_max_in = gui.NumberInputBox("Max. Deflection (l/xxx) [1/m]", 100, 1000, l/u_zul, "getInputVals")
    wc_in = gui.NumberInputBox("Weight Costs [Euro/kg]", 0, 1000, weight_costs, "getInputVals")
    sc_in = gui.NumberInputBox("Optimize Costs [0/1]", 0, 1, switch_costs, "getInputVals")
    sw_in = gui.NumberInputBox("Optimize Weight [0/1]", 0, 1, switch_weight, "getInputVals")
--  start optimziation   
    b1 = gui.PushButton("Start", "startOptimizer")
--     control.Pause("pause")
    result = gui.TextBox("result: ")
  end

  function getInputVals()
    l = l_in:GetValue()
    q = q_in:GetValue()*1000
    mos[1] = G_vel_in:GetValue()*1e6
    rho[1] = rho_vel_in:GetValue()
    
    h[0] = h0_in:GetValue()/100
    h[1] = h1_in:GetValue()/100
    h[2] = h2_in:GetValue()/100
    
    u_zul = l/u_max_in:GetValue()
    weight_costs = wc_in:GetValue()
    switch_costs = sc_in:GetValue()
    switch_weight = sw_in:GetValue()
  end

  function objective (x)
--     local h = x
    local costs_tot = (costs*x)[0] -- costs_tot [€/m²]	  
    local weight_tot = (rho*x)[0] -- weight_tot [kg/m²]	
--     if weight_tot*2.5*l > 7500 then -- above a weight of 7,5t, a bigger crane is needed at the construction site . that makes it 10times as expensive :)
-- 	weight_costs = 100
--     end
    return switch_costs*costs_tot + switch_weight*weight_tot*weight_costs
  end

-- This function defines the constraints. Note that it returns an array		
  function constraints (x)
    local h = x:Transpose()
    u_max, sig = calcStructure(h, l, moe, mos, rho)
    sig_t = math.max(math.abs(sig[{2,0}]),math.abs(sig[{2,1}]))*1.4
    sig_c_c = -sig[{0,0}]*1.4  --top stress in concrete layer
    sig_c_t = sig[{0,1}]*1.4   --bottom stress in concrete layer
    local const=tmath.Matrix({{.03-h[0]}, {.05-h[1]}, {.03-h[2]}, {u_max-u_zul}, {sig_c_c-f_cd}, {sig_c_t - f_ctm}, {sig_t-f_md}}) -- constraints for geometry and maximum deflection
    return const
  end

  function optimizer(start)
-- Run optimization in reverse communication mode
-- This is an endless loop which is terminated when
-- the value "go_on" returned from Compute is equal to zero
    nvariables = 3; nconstraints = 7
    ops = optimize.Conmin(nvariables, nconstraints)
    ops:SetDesign(start:Transpose())
    go_on=1
    while(1) do
  -- Compute one step and check for termination
      go_on=ops:Compute()
      if (go_on==0) then break end

  -- Compute objective
      x = ops:GetDesign()
      obj=objective(x)
      ops:SetObjective(obj);

  -- Compute constraints		
      cons = constraints(x)
      ops:SetConstraints(cons)
  -- temp printing of solutions each step
      sol = ops:GetDesign()
      print("max. u:", u_max/1e3, "mm")
      print("sig_c_c:", sig_c_c/1e6, "N/mm²")
      print("sig_c_t:", sig_c_t/1e6, "N/mm²")
      print("sig_t:", sig_t/1e6, "N/mm²")
      print("h_concrete      h_Velox        h_Wood", sol:Transpose())
	  -- print("total hight", h[0]+sol[0]+sol[1])		
    end
    return ops:GetDesign()
  end
  
  function startOptimizer()
    getInputVals()
  --   start = tmath.Matrix({{0.05}, {0.20}, {0.10}}); -- starting point: 20cm for velox, 10 cm for wood and 6cm concrete (fixed)
    sol = optimizer(h)
	  

  -- Print optimization result
    h = sol:Transpose()
    -- print("h_zul", h_max)
    u_max, sig = calcStructure(h, l, moe, mos, rho)
    print("==Results==")
    print("total height", h__tot(h))
    print("h_concrete       h_Velox        h_Wood", sol:Transpose())
    print("weight:", dead_load(h, rho)/9.81, "kg/m²")
    print("total costs:", objective(x), "Euro/m²")
    print("")
    print("==Constraints==")
    print("u_max ", u_max*1000 , " < u_zul ", u_zul*1000)
    print("sig_c,ed ", sig[{0,0}]*1.4/1e6, " < f_cd", f_cd/1e6)
    print("sig_c,ed ", sig[{0,1}]*1.4/1e6, " < f_ctm", f_ctm/1e6)
    print("sig_t,ed ", math.max(math.abs(sig[{2,0}],sig[{2,1}]))*1.4/1e6, " < f_ctm", f_md/1e6)
    
    if v == nil then v = graphics.Visualize(30,30,1000,800, "Frame") end
    v:Draw(struct, 1)
  --   U2 = struct:GetAllDisplacements()
  --   v:Vector(struct, U2, 2)
    -- tri = struct:Draw()
    -- v = graph.Graph3D("frame")
    -- v:Triangles(tri)
    -- v:Render()
    -- v:Autoscale()
  end

-- =============== Main starts here ==============================
--default values
l = 7.2 -- length of beam [m]
q = 3.0e3 -- variable load [N/m²]
h = tmath.Matrix({{0.06, 0.2, 0.1}}) -- thickness of part sections (top down) [m]
moe = tmath.Matrix({{19560e6, 1000e6, 1160e6}}) -- MoE [N/m²]
mos = tmath.Matrix({{moe[0]/2/(1+0.2), 15e6, 960e6}}) --MoS [N/m²]
rho = tmath.Matrix({{2272, 750, 470}}) --density [kg/m³]
costs = tmath.Matrix({{120, 200, 570}}) -- costs [€/m³]

-- constraints
weight_costs = .2 -- euro/kg
switch_costs = 1 --0/1 turn costs on/off
switch_weight = 1 --0/1 turn weight on/off
u_zul = l/400

--concrete
f_cd = 30e6    --compression concrete
f_ctm = 5.96e6 --tension concrete
--timber
k_mod = 0.8    --for NK1
gam_M = 1.3    --security factor
f_md = 24e6*k_mod/gam_M    --bending tension timber
-- 	  f_td = 10e6*    --compression timber

-- The optimization algorithm is CONMIN by G. Vanderplaats
define_gui()