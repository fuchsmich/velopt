--[[
beam system for shear analogy method
(c) 2012 Michael Fuchs michfu@gmx.at
--]]


function h__tot(h)
--   total height of cross section
  local hi = h[0]
  for i = 1,h:Cols()-1 do
    hi = hi + h[i]
  end
  return hi
end

function createNodes(l, noe)
  local dx = l/noe
  local dy = l/5
  local nodes_a = tmath.Matrix(noe+1, 4)
  local nodes_b = tmath.Matrix(noe+1, 4)
  
  for i = 0, noe do
    nodes_a[i] = tmath.Matrix({{1000 + i, i*dx, 0, 0}})
    nodes_b[i] = tmath.Matrix({{2000 + i, i*dx, -dy, 0}})
  end
  
  return nodes_a:AppendRows(nodes_b)
end

function createElements(noe, refnnr)
  local el_a = tmath.Matrix(noe, 4)
  local el_b = tmath.Matrix(noe, 4)
  
  for i = 0, noe-1 do
    el_a[i] = tmath.Matrix({{1000 + i, 1000 + i, 1001 + i, refnnr}})
    el_b[i] = tmath.Matrix({{2000 + i, 2000 + i, 2001 + i, refnnr}})
  end
  
  return el_a, el_b
end

function createConstraints(noe)
  local c = tmath.Matrix(noe-1, 7)
  for i = 1, noe-1 do
    c[i-1] = tmath.Matrix({{2, 1000+i, 1, -1, 2000+i, 1, 1}})
  end
  return c
end

function setSupports(noe)
--   fix reference node
  struct:GetNode(1):SetAvailDof(tmath.Matrix({{0, 0, 0, 0, 0, 0}}))
--   define supports
  struct:GetNode(1000):SetAvailDof(tmath.Matrix({{0, 0, 0, 0, 0, 1}}))
  struct:GetNode(2000):SetAvailDof(tmath.Matrix({{0, 0, 0, 0, 0, 1}}))
  struct:GetNode(1000+noe):SetAvailDof(tmath.Matrix({{1, 0, 0, 0, 0, 1}}))
  struct:GetNode(2000+noe):SetAvailDof(tmath.Matrix({{1, 0, 0, 0, 0, 1}}))
end

function secPropA(h, moe, mos, calProp)
--   calculates properties for section A
  local Iz = tmath.Matrix(h:Cols())

  for i = 0,h:Cols() - 1 do
    Iz[i] = h[i]^3/12
  end
  local eaa = (moe*h:Transpose())[0]
  local gaa = (mos*h:Transpose()*5/6)[0]
  local eia = (moe*Iz)[0]
  
  local A = eaa/calProp[0]*0.01  --can be 0
  local A_y = gaa/calProp[1] --can be oo
  local A_z = A_y
  local I_z = eia/calProp[0] --important part
  local I_y = I_z --??
  local I_x = I_y*2 --??
  return tmath.Matrix({{A, A_y, A_z, I_x, I_y, I_z}})
end


function y__s(h, fac)
--   calculates centerline of gravity due to factor fac (in this case moe)
  local n = h:Cols()
  local y = tmath.Matrix(1,n)
  for i = 0,n - 1 do
    y[i] = h[i]/2
    if i > 0 then y[i] = y[i] + y[i-1] + h[i-1]/2 end
  end
  local fachy = 0
  for i = 0,n - 1 do
    fachy = fachy + fac[i]*h[i]*y[i]
  end
  y_tots = fachy/(fac*h:Transpose())[0]
  for i = 0,n - 1 do
    y[i] = y[i] - y_tots
  end
  return y:Transpose()
end

function secPropB(h, moe, mos, calProp)
--   calculates properties for section B
  local n = h:Cols()
  local y_s = y__s(h, moe)
  local eib = 0
  local gab = 0
  local a = h__tot(h) - h[0]/2 - h[h:Cols()-1]/2
  
  for i = 0, n - 1 do
    eib = eib + moe[i]*h[i]*y_s[i]^2
    if i == 0 or i == n-1 then
      f = 2
    else
      f = 1
    end
    gab = gab + h[i]/(f*mos[i])
  end
  gab = a^2/gab
  local A_y = gab/calProp[1]
  local A = A_y  --can be 0
  local A_z = A_y
  local I_z = eib/calProp[0]
  local I_y = I_z
  local I_x = I_z*0.001
  return tmath.Matrix({{A, A_y, A_z, I_x, I_y, I_z}})
end

function addMaterial(h, moe, mos)
  -- add material
  local E_cal = 1e10 -- [N/m²]
  local nu_cal = 0.2
  local G_cal = E_cal/2/(1+nu_cal)
  local calProp = tmath.Matrix({{E_cal, G_cal}})
  
  local mm = struct:AddMaterial(1,"LINEAR_ELASTIC")
  mm:SetData(tmath.Matrix({{E_cal, nu_cal, 3850}}))

  local ss = struct:AddSection(11, "BEAM3D", 0)
  ss:SetData(secPropA(h, moe, mos, calProp))
  
  ss = struct:AddSection(12, "BEAM3D", 0)
  ss:SetData(secPropB(h, moe, mos, calProp))
end

function dead_load(h, rho)
  local g=9.81 -- [m/s²]
  return (h[0]*rho[0] + h[1]*rho[1] + h[2]*rho[2])*g
end

function calcStructure(h, l, moe, mos, rho)

--   create FEM structure object
  struct=fem.Structure("shear analogy")
  
-- number of elements
  local noe = 30
  
  struct:AddNodes(createNodes(l, noe))
-- reference node
  local refnnr = 1
  local refnode = tmath.Matrix({{refnnr, 0, 1, 0}})
  struct:AddNodes(refnode)
  
  setSupports(noe)

  addMaterial(h, moe, mos)

--   add elements to Structure
  local el_a, el_b = createElements(noe, refnnr)
  struct:AddElements("BEAM3D", 1, 11, el_a)
  struct:AddElements("BEAM3D", 1, 12, el_b)

-- Find global DOFs and assemble stiffness
  local nd=struct:GlobalDof()
  
--   add constraints between beam a and b
  struct:AddConstraints(createConstraints(noe))

-- apply load
  local var_load = 3000 --N/m²
  local node_load = (dead_load(h, rho) + var_load)*l/noe
  
  local K=struct:SparseStiffness()
  local F1=struct:GetAllDisplacements()
  for i = 2, noe+1 do
	F1[{i,1}] = -node_load
  end
  local F =  struct:ToDofDisplacements(F1)

-- solve system
  local U=K:SolveLU(F)
  local U1=struct:ToAllDisplacements(U)
--   get deformations in y direction
  local u = U1:GetCols(1)*(-1)
--   get maximum deflection
  u_max, z ,s = u:MaxCoeff()
  --nummer der Zeile des Knotens nnr in U1 or F1 struct:GetNodeIndex(nnr) 
  --Maximum einer Matrix: val,z,s = A:MaxCoeff()
  struct:SetDofDisplacements(U) -- apply deformations to structure (drawing)
  return u_max
end 

function getStresses(h, moe, mos)
  -- returns matrix of stresses
  -- rows = n° of layers
  -- cols = sig_top, sig_bottom, tau_max
  local sig = tmath.Matrix(3,3)
  local EA_a= moe * h:Transpose()
  local GA_a = mos * h:Transpose()*2/3
  
  return sig
end

