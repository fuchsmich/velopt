--[[
beam system for shear analogy method
(c) 2012 Michael Fuchs michfu@gmx.at
--]]

function createStructure(h, l, moe, mos)

  struct=fem.Structure("shear analogy")
  local h_tot = h[0] + h[1] + h[2]
  
  local a = h[0]/2 + h[1] + h[2]/2
  
  -- Anzahl der Unterteilungen (Anzahl der Elemente)
  local noe = 30
  -- distance of nodes 
  local dx = l/noe
  
--   local refnnr = 1
  local refnode = tmath.Matrix({{1, 0, 1, 0}})
  local nodes_a = tmath.Matrix({
				{1000, 0, 0, 0},
				{1001, dx, 0, 0},
				})
  local nodes_b = tmath.Matrix({
				{2000, 0, -a, 0},
				{2001, dx, -a, 0}
				})
  
--   local c = tmath.Matrix(7,1)
  local c = tmath.Matrix({{2, 1001, 1, -1, 2001, 1, 1}})
  local c1 = tmath.Matrix({
			  {2, 1001, 0, -1, 2001, 0, 1},
			  {2, 1001, 2, -1, 2001, 2, 1}
			  })

  local elements_a = tmath.Matrix({{1500, 1000, 1001, 1}}) 
  local elements_b = tmath.Matrix({{2500, 2000, 2001, 1}}) 

  local cur_nnr = 2
  -- rest of nodes
  while cur_nnr <= noe do
    nodes_a = nodes_a:AppendRows(tmath.Matrix({{1000+cur_nnr, cur_nnr*dx, 0, 0}}))
    nodes_b = nodes_b:AppendRows(tmath.Matrix({{2000+cur_nnr, cur_nnr*dx, -a, 0}}))

--     elements in beam a und b
    elements_a = elements_a:AppendRows(tmath.Matrix({{1500+cur_nnr-1, 1000+cur_nnr-1, 1000+cur_nnr, 1}})) 
    elements_b = elements_b:AppendRows(tmath.Matrix({{2500+cur_nnr-1, 2000+cur_nnr-1, 2000+cur_nnr, 1}}))
    if cur_nnr < noe then 
      c = c:AppendRows(tmath.Matrix({{2, 1000+cur_nnr, 1, -1, 2000+cur_nnr, 1, 1}})) 
      c1 = c1:AppendRows(tmath.Matrix({
			{2, 1000+cur_nnr, 0, -1, 2000+cur_nnr, 0, 1},
			{2, 1000+cur_nnr, 2, -1, 2000+cur_nnr, 2, 1}
			}))
    end
    cur_nnr = cur_nnr + 1
  end
 
  --print("Nodes", nodes_a, nodes_b)
  struct:AddNodes(refnode)
  struct:AddNodes(nodes_a)
  struct:AddNodes(nodes_b)

--   fix reference node
  struct:GetNode(1):SetAvailDof(tmath.Matrix({{0, 0, 0, 0, 0, 0}}))
--   define supports
  struct:GetNode(1000):SetAvailDof(tmath.Matrix({{0, 0, 0, 0, 0, 1}}))
  struct:GetNode(2000):SetAvailDof(tmath.Matrix({{0, 0, 0, 0, 0, 1}}))
  struct:GetNode(1000+noe):SetAvailDof(tmath.Matrix({{1, 0, 0, 0, 0, 1}}))
  struct:GetNode(2000+noe):SetAvailDof(tmath.Matrix({{1, 0, 0, 0, 0, 1}}))

 -- Materials and Dimensions
  local EA_a=0
  local GA_a=0
  local EI_a=0
  local EI_b=0

  local ga_b=0 --temporary value for GA_b
  local h_above=0
  local f=1
  
  for i=0,2 do
  -- distance between axis of layer and total axis
    local z = h_tot/2 - h[i]/2 - h_above
    h_above = h_above+h[i]
    -- stiffness of beam a
    EA_a = EA_a + moe[i]*h[i] 
    -- shear stiffness of beam a (TODO: multiply by 2/3 or sth??)
    GA_a = GA_a + mos[i]*h[i]
    -- bending stiffness of beam a
    EI_a = EI_a + moe[i]*h[i]^3/12 
    -- bending stiffness of beam b (Steineranteile)
    EI_b = EI_b + moe[i]*h[i]*z^2
    if i==0 or i==2 then
      f = 2
    else
      f = 1
    end
    ga_b = ga_b + h[i]/(f*mos[i])
  end

  --   Ersatz shear stiffness of beam b
  local GA_b = a^2/ga_b

--define parameters material with refernce stiffness
  local E_cal = 1e12 -- [N/m²]
  local nu_cal = 0.2
  local G_cal = E_cal/2/(1+nu_cal)

--add section for beam a
  local ss = struct:AddSection(11, "BEAM3D", 0)
  local A = EA_a/E_cal
  local A_y = GA_a/G_cal
  local A_z = A_y
  local I_z = EI_a/E_cal
  local I_y = I_z
  local I_x = I_y*2
  local secProp = tmath.Matrix({{A, A_y, A_z, I_x, I_y, I_z}})
  --print("secPropA", secProp)
  ss:SetData(secProp)
  
--add section for beam b
  ss = struct:AddSection(12, "BEAM3D", 0)
  A = 0.5*A
  A_y = GA_b/G_cal
  A_z = A_y
  I_z = EI_b/E_cal
  I_y = I_z
  I_x = I_y*2
  secProp = tmath.Matrix({{A, A_y, A_z, I_x, I_y, I_z}})
  --print("secPropB", secProp)
  ss:SetData(secProp)

  -- Testsection
--   ss = struct:AddSection(13, "BEAM3D", 0)
--   x=0.05       -- Quadratic cross section width/height
--   A = x^2     -- Cross section area (used for axial stiffness)
--   Ay = A*2/3  -- Shear area (used for shear stiffness in y-direction)
--   Az = A*2/3
--   Ix = x^4/6  -- Polar moment of inertial (used for torsion)
--   Iy = Ix/2   -- Cross section moment of inertia about y-Axis (used for bending about y-Axis)
--   Iz = Ix/2
--   ss:SetData(tmath.Matrix({{A, Ay, Az, Ix, Iy, Iz}}))

-- add materials 
  local mm = struct:AddMaterial(1,"LINEAR_ELASTIC")
  local matProp = tmath.Matrix({{E_cal, nu_cal, 3850}})
  --print("MatProp", matProp)
  mm:SetData(matProp)

-- material for testing
--   mm = struct:AddMaterial(2, "LINEAR_ELASTIC")
--   mm:SetData(tmath.Matrix({{2.1e11, .3, 7850}}))
  
 
-- add elements, first create Matrices with [number, start, end, reference point]
  --print("Elements A", elements_a)
  struct:AddElements("BEAM3D", 1, 11, elements_a)
  struct:AddElements("BEAM3D", 1, 12, elements_b)
  
-- Find global DOFs and assemble stiffness
  local nd=struct:GlobalDof()
--   print(c)
  struct:AddConstraints(c)
--   struct:AddConstraints(c1)
  
-- load
  var_load = 3000 --N/m²
  node_load = (dead_load(h, rho) + var_load)*dx
  
  K=struct:SparseStiffness()
--   print("K", K)
  local F1=struct:GetAllDisplacements()
  for i = 2, noe+1 do
	F1[{i,1}] = -node_load
  end
  local F=struct:ToDofDisplacements(F1)
  local U=K:SolveLU(F)
  local U1=struct:ToAllDisplacements(U)
--   print("U1", U1)
  local u = U1:GetCols(1)*(-1)
  u_max, z ,s = u:MaxCoeff()
  -- print("max. u:", u_max) --, " @ l = ", (z-2)*dx)   
  -- local uo=-U1[{2+15,1}]
  -- local uu=-U1[{2+15+30,1}]
  -- print("uo", uo, "uu", uu)
  --Zeile des Knotens struct:GetNodeIndex(nnr)
  --Maximum einer Matrix: val,z,s = A:MaxCoeff()
  struct:SetDofDisplacements(U) --(verformungen anbringen)
  return u_max
end

function dead_load(h, rho)
  local g=9.81 -- [m/s²]
  return (h[0]*rho[0] + h[1]*rho[1] + h[2]*rho[2])*g
end