--[[
beam system for shear analogy method
(c) 2012 Michael Fuchs michfu@gmx.at
--]]
function deflection(h, l, moe, mos)
  createStructure(h, l, moe, mos)
  -- TODO solve FEM-system, get u
  return u
end

function createStructure(h, l, moe, mos)
-- TODO create node in the middle

  struct=fem.Structure("shear analogy")
  local h_tot = 0
  
  for i = 0,2 do
    h_tot = h_tot + h[i]
  end
--   print("h_tot", h_tot)
  
  local a = h[0]/2 + h[1] + h[2]/2
--   print("a", a)
  --distance between first nodes (TODO: check if distance is big enough or at least bigger than 0)
  local dx = (l % a)/2
  if dx < (a/100000) then
    dx = a
  end
  print("dx", dx)
--   number of nodes 
--   local non = math.floor(l/a) + 1
--   print("Number of Nodes", non)
  
  local refnode = tmath.Matrix({{3000, 0, 1, 0}})
  local nodes_a = tmath.Matrix({
    {0, 0, 0, 0},
    {1, l/3, 0, 0},
    {2, 2*l/3, 0, 0},
    {3, l, 0, 0}
  })
  local nodes_b = tmath.Matrix({
    {2000, 0, -a, 0},
    {2001, l/3, -a, 0},
    {2002, 2*l/3, -a, 0},
    {2003, l, -a, 0}
  })
  
--   local elements_a = tmath.Matrix({{1500, 1000, 1001, 1}}) 
  local elements_a = tmath.Matrix({
				  {1, 0, 1, 3000},
				  {2, 1, 2, 3000},
				  {3, 2, 3, 3000}
  }) 
  local elements_b = tmath.Matrix({
				  {2500, 2000, 2001, 3000},
				  {2501, 2001, 2002, 3000},
				  {2502, 2002, 2003, 3000}
  }) 
  local c = tmath.Matrix({
			  {2, 1, 1, -1, 2001, 1, 1},
			  {2, 2, 1, -1, 2002, 1, 1}
  })


  print("Nodes", nodes_a, nodes_b)
  struct:AddNodes(refnode)
  struct:AddNodes(nodes_a)
  struct:AddNodes(nodes_b)

--   fix reference node
  struct:GetNode(3000):SetAvailDof(tmath.Matrix({{0, 0, 0, 0, 0, 0}}))
--   define supports
  struct:GetNode(0):SetAvailDof(tmath.Matrix({{0, 0, 0, 0, 0, 0}}))
  struct:GetNode(3):SetAvailDof(tmath.Matrix({{0, 0, 0, 0, 0, 1}}))
  struct:GetNode(2000):SetAvailDof(tmath.Matrix({{1, 0, 0, 0, 0, 1}}))
  struct:GetNode(2003):SetAvailDof(tmath.Matrix({{1, 0, 0, 0, 0, 1}}))

  -- Testsection
  ss = struct:AddSection(13, "BEAM3D", 0)
  x=0.1       -- Quadratic cross section width/height
  A = x^2     -- Cross section area (used for axial stiffness)
  Ay = A*2/3  -- Shear area (used for shear stiffness in y-direction)
  Az = A*2/3
  Ix = x^4/6  -- Polar moment of inertial (used for torsion)
  Iy = Ix/2   -- Cross section moment of inertia about y-Axis (used for bending about y-Axis)
  Iz = Ix/2
  ss:SetData(tmath.Matrix({{A, Ay, Az, Ix, Iy, Iz}}))

-- material for testing
  mm = struct:AddMaterial(2, "LINEAR_ELASTIC")
  mm:SetData(tmath.Matrix({{2.1e11, .3, 7850}}))
  
  
-- add elements, first create Matrices with [number, start, end, reference point]
  print("Elements A", elements_a)
--   struct:AddElements("BEAM3D", 2, 13, tmath.Matrix({{1,0,1,10}}))
  struct:AddElements("BEAM3D", 2, 13, elements_a)
  struct:AddElements("BEAM3D", 2, 13, elements_b)
  
-- Find global DOFs and assemble stiffness
  local nd=struct:GlobalDof()
--   print(c)
  struct:AddConstraints(c)
  
  local K=struct:SparseStiffness()
  kk=K:Expand()
  print("kk", kk)
  F1=struct:GetAllDisplacements()
--   F1[{1,1}] = -3e3
  F1[{2,1}] = -3e3
  F=struct:ToDofDisplacements(F1)
  -- solve for displacements
  U=K:Solve(F)
  U1=struct:ToAllDisplacements(U)
  u=U1[{1,1}]
  print("u", u)
  return u
end

