--[[
beam system for shear analogy method
(c) 2012 Michael Fuchs michfu@gmx.at
--]]

-- function createStructure(h, l, moe, mos)
l = 7.2 -- length of beam [m]

  struct=fem.Structure("shear analogy")
--   local h_tot = h[0] + h[1] + h[2]
  
--   local a = h[0]/2 + h[1] + h[2]/2
  
  -- Anzahl der Unterteilungen (Anzahl der Elemente)
  local noe = 30
  -- distance of nodes 
  local dx = l/noe
  
  local refnnr = 1
  local refnode = tmath.Matrix({{1, 0, 1, 0}})
  local nodes_a = tmath.Matrix({
				{1000, 0, 0, 0},
				{1001, dx, 0, 0},
				})
--   local nodes_b = tmath.Matrix({
-- 				{2000, 0, -a, 0},
-- 				{2001, dx, -a, 0}
-- 				})
  
--   local c = tmath.Matrix(7,1)

  local elements_a = tmath.Matrix({{1500, 1000, 1001, 1}}) 
--   local elements_b = tmath.Matrix({{2500, 2000, 2001, 1}}) 

  local cur_nnr = 2
  -- rest of nodes
  while cur_nnr <= noe do
    nodes_a = nodes_a:AppendRows(tmath.Matrix({{1000+cur_nnr, cur_nnr*dx, 0, 0}}))
--     nodes_b = nodes_b:AppendRows(tmath.Matrix({{2000+cur_nnr, cur_nnr*dx, -a, 0}}))

--     elements in beam a und b
    elements_a = elements_a:AppendRows(tmath.Matrix({{1500+cur_nnr-1, 1000+cur_nnr-1, 1000+cur_nnr, 1}})) 
--     elements_b = elements_b:AppendRows(tmath.Matrix({{2500+cur_nnr-1, 2000+cur_nnr-1, 2000+cur_nnr, 1}}))
    cur_nnr = cur_nnr + 1
  end
 
  --print("Nodes", nodes_a, nodes_b)
  struct:AddNodes(nodes_a)
  struct:AddNodes(refnode)
--   struct:AddNodes(nodes_b)

--   fix reference node
--   define supports
  struct:GetNode(1000):SetAvailDof(tmath.Matrix({{0, 0, 0, 0, 0, 1}}))
--   struct:GetNode(2000):SetAvailDof(tmath.Matrix({{0, 0, 0, 0, 0, 1}}))
  struct:GetNode(1000+noe):SetAvailDof(tmath.Matrix({{1, 0, 0, 0, 0, 1}}))
--   struct:GetNode(2000+noe):SetAvailDof(tmath.Matrix({{1, 0, 0, 0, 0, 1}}))
  struct:GetNode(1):SetAvailDof(tmath.Matrix({{0, 0, 0, 0, 0, 0}}))

	ss = struct:AddSection(1, "BEAM3D", 0)
	x=0.5       -- Quadratic cross section width/height
        A = x^2     -- Cross section area (used for axial stiffness)
        Ay = A*2/3  -- Shear area (used for shear stiffness in y-direction)
        Az = A*2/3
	Ix = x^4/6  -- Polar moment of inertial (used for torsion)
	Iy = Ix/2   -- Cross section moment of inertia about y-Axis (used for bending about y-Axis)
	Iz = Ix/2
	
	ss:SetData(tmath.Matrix({{A, Ay, Az, Ix, Iy, Iz}}))

 
-- material for testing
	mm = struct:AddMaterial(8, "LINEAR_ELASTIC")
	mm:SetData(tmath.Matrix({{2.1e11, .3, 7850}}))
  
 
-- add elements, first create Matrices with [number, start, end, reference point]
  --print("Elements A", elements_a)
  struct:AddElements("BEAM3D", 8, 1, elements_a)
--   struct:AddElements("BEAM3D", 1, 12, elements_b)
  
-- Find global DOFs and assemble stiffness
  local nd=struct:GlobalDof()
--   print(c)
--   struct:AddConstraints(c)
--   struct:AddConstraints(c1)
  
-- load
--   var_load = 3000 --N/m²
--   node_load = (dead_load(h, rho) + var_load)*dx
  
--   print("dead_load", dead_load(h, rho), "N/m²")
--   print("node_load", node_load)
--   sum_y = node_load*30
--   print("sum_y", sum_y)
  
  
-- solve FEM-System  
  K=struct:SparseStiffness()
--   print("K", K)
  local F1=struct:GetAllDisplacements()
  for i = 1, noe-1 do
	F1[{i,1}] = -10e3
  end
  local F=struct:ToDofDisplacements(F1)
  local U=K:SolveLU(F)
  local U1=struct:ToAllDisplacements(U)
--   print("U1", U1)
  local u = U1:GetCols(1)
  u_max, z ,s = u:MinCoeff()
  print("max. u:", u_max) --, " @ l = ", (z-2)*dx)   
  local uo=-U1[{noe/2,1}]
--   local uu=-U1[{1+15+31,1}]
  print("uo", uo, "uu", uu)
  --Zeile des Knotens struct:GetNodeIndex(nnr)
  --Maximum einer Matrix: val,z,s = A:MaxCoeff()
  struct:SetDofDisplacements(U) --(verformungen anbringen)
--   return u_max
-- end
  
-- v=graphics.Visualize(30,30,1000,800, "Frame")
-- v:Draw(struct, 1)
