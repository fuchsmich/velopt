l_in = gui.NumberInputBox("Lenght", 1, 10, 2, "set_input_values")
h_max_in = gui.NumberInputBox("Max Hight", .25, .8, .33, "set_input_values")

function set_input_values()
    l = l_in:GetValue()
    h = h_max_in:GetValue()
end

timo=true
a=l/4

struct=fem.Structure("frame")
-- Create nodes
nodes = tmath.Matrix({
	{11, 0, 0, 0},
	{12, l/2, 0, 0},
	{13, l, 0, 0},
	{111, 0, a, 0},
	{112, l/2, a, 0},
	{113, l, a, 0},
	{16, 0, 1, 0}
})
struct:AddNodes(nodes)

-- Define support conditions and fix reference node 16
struct:GetNode(11):SetAvailDof(tmath.Matrix({{0, 0, 0, 0, 0, 1}}))
struct:GetNode(13):SetAvailDof(tmath.Matrix({{1, 0, 0, 0, 0, 1}}))
struct:GetNode(111):SetAvailDof(tmath.Matrix({{0, 0, 0, 0, 0, 1}}))
struct:GetNode(113):SetAvailDof(tmath.Matrix({{1, 0, 0, 0, 0, 1}}))
struct:GetNode(16):SetAvailDof(tmath.Matrix({{0, 0, 0, 0, 0, 0}}))


--define section(s)
-- timoshenko beam
ss = struct:AddSection(1, "BEAM3D", 0)
x=0.05       -- Quadratic cross section width/height
A = x^2     -- Cross section area (used for axial stiffness)
Ay = A*2/3  -- Shear area (used for shear stiffness in y-direction)
Az = A*2/3
Ix = x^4/6  -- Polar moment of inertial (used for torsion)
Iy = Ix/2   -- Cross section moment of inertia about y-Axis (used for bending about y-Axis)
Iz = Ix/2
ss:SetData(tmath.Matrix({{A, Ay, Az, Ix, Iy, Iz}}))

-- bernoulli beam (for testing and drawing)
ss = struct:AddSection(2, "RECT", 0)
ss:SetData(tmath.Matrix({{x, x}}))

-- define material
mm = struct:AddMaterial(8, "LINEAR_ELASTIC")
mm:SetData(tmath.Matrix({{2.1e11, .3, 7850}}))


--define elements
elements = tmath.Matrix({{1, 11, 12, 16},
			 {2, 12, 13, 16},
			 {11, 111, 112, 16},
			 {12, 112, 113, 16}
			})

if timo then
  struct:AddElements("BEAM3D", 8, 1, elements)
else
  struct:AddElements("RECT", 8, 2, elements)
end

-- assemble stiffness matrix and load vector
local nd=struct:GlobalDof()
-- constraints
c1=tmath.Matrix({{2, 12, 0, -1, 112, 0, 1}})
struct:AddConstraints(c1)

local K=struct:SparseStiffness()
kk=K:Expand()
print("kk", kk)
local F1=struct:GetAllDisplacements()
F1[{1,1}] = 3e5
local F=struct:ToDofDisplacements(F1)
-- solve for displacements
U=K:Solve(F)
U1=struct:ToAllDisplacements(U)
u=U1[{1,1}]
print("u", u)

v=graphics.Visualize(30,30,1000,800, "Frame")
v:Draw(struct, 1)
