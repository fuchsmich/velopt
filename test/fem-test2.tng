 	struct=fem.Structure("frame")
-- Create nodes
	nodes = tmath.Matrix({
		{11, 0, 0, 0},
		{12, 2, 0, 0},
-- 		{13, 2, 0, 0},
		{21, 0, 0.5, 0},
		{22, 2, 0.5, 0},
-- 		{23, 2, 0.5, 0},
		{16, 0, 1, 0}
	})
	struct:AddNodes(nodes)

-- Define support conditions and fix reference node 16
	struct:GetNode(11):SetAvailDof(tmath.Matrix({{0, 0, 0, 0, 0, 0}}))
	struct:GetNode(21):SetAvailDof(tmath.Matrix({{0, 0, 0, 0, 0, 1}}))
	struct:GetNode(16):SetAvailDof(tmath.Matrix({{0, 0, 0, 0, 0, 0}}))
	
	ss = struct:AddSection(1, "RECT", 0)
	    x=0.1
	    ss:SetData(tmath.Matrix({{x, x}}))
	    
    mm = struct:AddMaterial(8, "LINEAR_ELASTIC")
	mm:SetData(tmath.Matrix({{2.1e11, .3, 7850}}))
--define elements	
	struct:AddElements("RECT", 8, 1, tmath.Matrix({{1, 11, 12, 16}}))
-- 	struct:AddElements("RECT", 8, 1, tmath.Matrix({{1, 21, 22, 16}}))
-- 	struct:AddElements("RECT", 8, 1, tmath.Matrix({{1, 13, 22, 16}}))
-- Find global DOFs and assemble stiffness
	nd=struct:GlobalDof()

--     c1=tmath.Matrix({{2, 12, 0, -1, 22, 0, 1}});
--     struct:AddConstraints(c1);
--     c2=tmath.Matrix({{2, 12, 1, -1, 22, 1, 1},
-- 		     {2, 12, 2, -1, 22, 2, 1}});
--     struct:AddConstraints(c2);
	
-- assemble stiffness matrix and load vector
	local nd=struct:GlobalDof()
	local K=struct:SparseStiffness()
	kk=K:Expand()
-- 	print("kk", kk)
	local F1=struct:GetAllDisplacements()
	F1[{1,1}] = 1e5
	local F=struct:ToDofDisplacements(F1)
-- solve for displacements
	U=K:Solve(F)
	U1=struct:ToAllDisplacements(U)
	print("U1", U1)
	u=U1[{1,1}]
	print("u", u)
	
    	v=graphics.Visualize(30,30,1000,800, "Frame")
	v:Draw(struct, 1)	
