 	struct=fem.Structure("frame")
-- Create nodes
	nodes = tmath.Matrix({
		{0, 0, 0, 0}
	})
	n = 2
	for i = 1, n do
	  nodes = nodes:AppendRows(tmath.Matrix({{i, i, 0, 0}}))
	end
	nodes = nodes:AppendRows(tmath.Matrix({{116, 0, 1, 0}}))
	print(nodes)
	struct:AddNodes(nodes)

-- Define support conditions and fix reference node 16
	struct:GetNode(0):SetAvailDof(tmath.Matrix({{0, 0, 0, 0, 0, 1}}))
	struct:GetNode(n):SetAvailDof(tmath.Matrix({{1, 0, 0, 0, 0, 1}}))
	struct:GetNode(116):SetAvailDof(tmath.Matrix({{0, 0, 0, 0, 0, 0}}))
	
	ss = struct:AddSection(1, "BEAM3D", 0)
	x=0.5       -- Quadratic cross section width/height
        A = x^2     -- Cross section area (used for axial stiffness)
        Ay = A*2/3  -- Shear area (used for shear stiffness in y-direction)
        Az = A*2/3
	Ix = x^4/6  -- Polar moment of inertial (used for torsion)
	Iy = Ix/2   -- Cross section moment of inertia about y-Axis (used for bending about y-Axis)
	Iz = Ix/2
	
	ss:SetData(tmath.Matrix({{A, Ay, Az, Ix, Iy, Iz}}))
	    
	mm = struct:AddMaterial(8, "LINEAR_ELASTIC")
	mm:SetData(tmath.Matrix({{2.1e11, .3, 7850}}))
--define elements
	elements = tmath.Matrix({{100, 0, 1, 116}})
	for i = 1, n-1 do
	  elements = elements:AppendRows(tmath.Matrix({{100+i, i, i+1, 116}}))
	end
	print(elements)
	struct:AddElements("BEAM3D", 8, 1, elements)
	
-- assemble stiffness matrix and load vector
	local nd=struct:GlobalDof()
	local K=struct:SparseStiffness()
	kk=K:Expand()
-- 	print("kk", kk)
	local F1=struct:GetAllDisplacements()
	F1[{1,1}] = 2e5
	for i = 1,n-1 do
	  F1[{i,1}] = 2e5
	end
-- 	print(F1)
	local F=struct:ToDofDisplacements(F1)
-- solve for displacements
	U=K:Solve(F)
	U1=struct:ToAllDisplacements(U)
	u=U1[{n/2,1}]
	print("u", u)
--   struct:SetDofDisplacements(U) --(verformungen anbringen)

-- 	v=graphics.Visualize(30,30,1000,800, "Frame")
-- v:Draw(struct, 1)
